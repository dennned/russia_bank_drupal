<?php

/**
 * Autoloads and registers class.
 *
 * @param string $class The fully-qualified class name.
 *
 * @return void
 */
spl_autoload_register(function ($class) {

    // Project-specific namespace prefix.
    $prefix = 'Drupal\\russiabank\\';
    // Base directory for the namespace prefix.
    $base_dir = __DIR__ . '/src/';
    // Check if the class uses the namespace prefix.
    $len = strlen($prefix);
    if (strncmp($prefix, $class, $len) !== 0) {
        // If no, move to the next registered autoloader.
        return;
    }
    // Get the relative class name.
    $relative_class = substr($class, $len);
    // Replace the namespace prefix with the base directory, replace namespace
    // separators with directory separators in the relative class name, append
    // with '.php'.
    $file = $base_dir . str_replace('\\', '/', $relative_class) . '.php';
    if (file_exists($file)) {
        // If the file exists, require it.
        require $file;
    }
});

/**
 * @param $main
 * @return array[]
 */
function russiabank_menu()
{
    return [
        'bank-info' => [
            'title'            => 'BANK INFO',
            'page callback'    => 'content_bank_info',
            'access callback'  => 'user_access',
            'access arguments' => array('access content'),
        ]
    ];
}

/**
 * @return array|mixed
 */
function content_bank_info() {
    $main = new \Drupal\russiabank\Controller\MainController();
    return $main->contentAction();
}

/**
 * @param $form
 * @param $form_state
 * @return array
 * @throws Exception
 */
function test_search_form($form, &$form_state){
    $main = new \Drupal\russiabank\Controller\MainController();

    $header = [
        t('ID'),
        t('NumCode'),
        t('CharCode'),
        t('Nominal'),
        t('Name'),
        t('Value'),
    ];
    $rows = null;

    $currencies_values = $main->getCurrencies();

    $form = [
        'currencies_options' => [
            '#type' => 'select',
            '#prefix' => 'Currencies',
            '#options' => $currencies_values,
            '#default_value' => 0
        ],
        'date_from' => [
            '#type'             => 'textfield',
            '#title'            => t('From Date (dd/mm/yyyy)'),
            '#required'         => false,
            '#attributes'       => [
                'placeholder'   => '10/12/2020'
            ],
            '#default_value'    => isset($_GET['date_from']) ? $_GET['date_from'] : null
        ],
        'date_to' => [
            '#type'             => 'textfield',
            '#title'            => t('To Date (dd/mm/yyyy)'),
            '#required'         => false,
            '#attributes'       => [
                'placeholder'   => '10/01/2021'
            ],
            '#default_value'    => isset($_GET['date_to']) ? $_GET['date_to'] : null
        ],
        'by_page' => [
            '#type'             => 'textfield',
            '#title'            => t('Results by page'),
            '#required'         => false,
            '#attributes'       => [
                'placeholder'   => 10
            ],
            '#default_value'    => isset($_GET['by_page']) ? $_GET['by_page'] : null
        ],
        'export' => [
            '#type'             => 'checkbox',
            '#title'            => t('Export to json'),
            '#required'         => false,
            '#default_value'    => isset($_GET['export']) ? $_GET['export'] : null
        ],
        'submit' => [
            '#type'           => 'submit',
            '#value'          => t('submit'),
        ],
        '#method' => 'get'
    ];

    $rows = $main->getDailyData();

    if (!empty($rows)) {
        if ($rows['mode'] === true) {
            unset($header);
            $header = [
                t('ID'),
                t('Date'),
                t('Nominal'),
                t('Value'),
            ];
        }

        $rows = pager_array_splice($rows['data'], 10);
    }

    $form['table'] = array(
        '#theme' => 'table',
        '#header' => $header,
        '#rows' => $rows,
        '#empty' => t('Empty result')
    );

    $form['pager'] = array('#markup' => theme('pager'));

    return $form;
}

function test_search_form_validate($form, &$form_state)
{
}

function test_search_form_submit($form, &$form_state)
{
}

/**
 * @param $data
 * @param int $limit
 * @param int $element
 * @return array
 */
function pager_array_splice($data, $limit = 9, $element = 0)
{
    global $pager_page_array, $pager_total, $pager_total_items;
    $page = isset($_GET['page']) ? $_GET['page'] : '';

    // Convert comma-separated $page to an array, used by other functions.
    $pager_page_array = explode(',', $page);

    // We calculate the total of pages as ceil(items / limit).
    $pager_total_items[$element] = count($data);
    $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
    $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));

    return array_slice($data, $pager_page_array[$element] * $limit, $limit, TRUE);
}

